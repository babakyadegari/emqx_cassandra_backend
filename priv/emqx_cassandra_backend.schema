{mapping, "cassandra_backend.contact_points", "emqx_cassandra_backend.erlcass", [
  {datatype, string},
  {default, "127.0.0.1"}
]}.

{mapping, "cassandra_backend.port", "emqx_cassandra_backend.erlcass", [
  {datatype, integer},
  {default, 9042}
]}.

{mapping, "cassandra_backend.keyspace", "emqx_cassandra_backend.erlcass", [
  {datatype, string},
  {default, "smartpot"}
]}.

{mapping, "cassandra_backend.log_level", "emqx_cassandra_backend.erlcass", [
  {datatype, integer},
  {default, 3}
]}.


{mapping, "cassandra_backend.username", "emqx_cassandra_backend.username", [
  {datatype, string},
  {default, ""}
]}.

{mapping, "cassandra_backend.password", "emqx_cassandra_backend.password", [
  {datatype, string},
  {default, ""}
]}.

{mapping, "cassandra_backend.auth.webservice_client_id", "emqx_cassandra_backend.webservice_client_id", [
  {datatype, string},
  {default, "NO_ID"}
]}.

{mapping, "cassandra_backend.auth_table", "emqx_cassandra_backend.auth_table", [
  {datatype, string},
  {default, "mqtt_auth"}
]}.

%%-*- mode: erlang -*-
%% emqx_cassandra_backend.auth config mapping

{mapping, "cassandra_backend.auth.usertable", "emqx_cassandra_backend.usertable", [
  {datatype, string},
  {default, ""}
]}.

{mapping, "cassandra_backend.auth.auth_query", "emqx_cassandra_backend.auth_query", [
  {datatype, string}
]}.

{mapping, "cassandra_backend.auth.password_hash", "emqx_cassandra_backend.password_hash", [
  {datatype, string}
]}.

{mapping, "cassandra_backend.auth.super_query", "emqx_cassandra_backend.super_query", [
  {datatype, string}
]}.

{mapping, "cassandra_backend.auth.acl_query", "emqx_cassandra_backend.acl_query", [
  {datatype, string}
]}.

{translation, "emqx_cassandra_backend.password_hash", fun(Conf) ->
  HashValue = cuttlefish:conf_get("cassandra_backend.auth.password_hash", Conf),
    case string:tokens(HashValue, ",") of
        [Hash]           -> list_to_atom(Hash);
        [Prefix, Suffix] -> {list_to_atom(Prefix), list_to_atom(Suffix)};
        [Hash, MacFun, Iterations, Dklen] -> {list_to_atom(Hash), list_to_atom(MacFun), list_to_integer(Iterations), list_to_integer(Dklen)};
        _                -> plain
    end
end}.

{translation, "emqx_cassandra_backend.erlcass", fun(Conf) ->
  Ips = cuttlefish:conf_get("cassandra_backend.contact_points", Conf),
  Keyspace = cuttlefish:conf_get("cassandra_backend.keyspace", Conf),
  LogLevel = cuttlefish:conf_get("cassandra_backend.log_level", Conf),
    [
      {log_level, LogLevel},
      {keyspace, list_to_binary(Keyspace)},
      {cluster_options,[
          {contact_points, list_to_binary(Ips)},
          {latency_aware_routing, true},
          {token_aware_routing, true},
          {number_threads_io, 4},
          {queue_size_io, 128000},
          {core_connections_host, 1},
          {tcp_nodelay, true},
          {tcp_keepalive, {true, 60}},
          {connect_timeout, 5000},
          {request_timeout, 5000},
          {retry_policy, {default, true}},
          {default_consistency_level, 6}
      ]}
  ]
end}.
